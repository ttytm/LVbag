name: Linux

on:
  workflow_call:

env:
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.REPO_NAME }}
    steps:
      - name: Checkout ${{ env.REPO_NAME }}
        uses: actions/checkout@v4
        with:
          path: ${{ env.REPO_NAME }}
      - name: Checkout V
        uses: actions/checkout@v4
        with:
          repository: 'vlang/v'
          path: vlang
      - name: Setup V
        run: cd ../vlang && make -j4 && ./v symlink && v version
      - run: v install
      - name: Cache
        uses: actions/cache/save@v3
        with:
          path: |
            vlang
            ~/.vmodules
          key: ${{ runner.os }}-${{ github.sha }}

  lint:
    needs: setup
    uses: ./.github/workflows/lint.yml

  test:
    needs: setup
    strategy:
      matrix:
        cc: [tcc, gcc, clang]
        # optimization: ['', -prod, -cstrict] # cstrict currently fails with pcre
        optimization: ['', -prod]
        exclude:
          - cc: tcc
            optimization: -prod
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      VFLAGS: -cg -cc ${{ matrix.cc }} ${{ matrix.optimization }} -o lvb
    defaults:
      run:
        working-directory: ${{ env.REPO_NAME }}
    steps:
      - name: Checkout ${{ env.REPO_NAME }}
        uses: actions/checkout@v4
        with:
          path: ${{ env.REPO_NAME }}
      - name: Restore Cache
        uses: actions/cache/restore@v3
        with:
          path: |
            vlang
            ~/.vmodules
          key: ${{ runner.os }}-${{ github.sha }}
          fail-on-cache-miss: true
      - name: Setup V
        run: ../vlang/v symlink && v version
      - name: Build
        run: v .
      - name: Run
        run: ./lvb .

  test-sanitzed:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cc: [gcc, clang]
        sanitizer: [address, leak]
      fail-fast: false
    env:
      VFLAGS: -cg -cc ${{ matrix.cc }} -o lvb
    defaults:
      run:
        working-directory: ${{ env.REPO_NAME }}
    steps:
      - name: Checkout ${{ env.REPO_NAME }}
        uses: actions/checkout@v4
        with:
          path: ${{ env.REPO_NAME }}
      - name: Restore Cache
        uses: actions/cache/restore@v3
        with:
          path: |
            vlang
            ~/.vmodules
          key: ${{ runner.os }}-${{ github.sha }}
          fail-on-cache-miss: true
      - name: Setup V
        run: ../vlang/v symlink && v version
      - name: Build
        run: |
          if [[ ${{ matrix.cc }} == "gcc" && ${{ matrix.sanitizer }} == "address" ]]; then
            cmd="v $VFLAGS -cflags -fsanitize=address -cflags -fsanitize-address-use-after-scope -cflags -fsanitize=pointer-compare -cflags -fsanitize=pointer-subtract ."
          else
            cmd="v $VFLAGS -cflags -fsanitize=${{ matrix.sanitizer }} ."
          fi
          echo "$cmd"
          eval "$cmd"
      - name: Run
        run: ./lvb .

  deploy:
    needs: [test, test-sanitzed, lint]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      ARTIFACT: lvb-linux-amd64
      VFLAGS: -cc gcc -prod
    defaults:
      run:
        working-directory: ${{ env.REPO_NAME }}
    steps:
      - name: Checkout ${{ env.REPO_NAME }}
        uses: actions/checkout@v4
        with:
          path: ${{ env.REPO_NAME }}
      - name: Restore Cache
        uses: actions/cache/restore@v3
        with:
          path: |
            vlang
            ~/.vmodules
          key: ${{ runner.os }}-${{ github.sha }}
          fail-on-cache-miss: true
      - name: Setup V
        run: ../vlang/v symlink && v version
      - name: Build
        run: v -cc gcc -prod -o $ARTIFACT .
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ env.REPO_NAME }}/${{ env.ARTIFACT }}
      - name: Release Artifacts
        if: github.ref_type == 'tag'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.REPO_NAME }}/${{ env.ARTIFACT }}

  deploy-example:
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      ARTIFACT: gui_project-linux-amd64
    defaults:
      run:
        working-directory: ${{ env.REPO_NAME }}
    steps:
      - name: Checkout ${{ env.REPO_NAME }}
        uses: actions/checkout@v4
        with:
          path: ${{ env.REPO_NAME }}
      - name: Restore Cache
        uses: actions/cache/restore@v3
        with:
          path: |
            vlang
            ~/.vmodules
          key: ${{ runner.os }}-${{ github.sha }}
          fail-on-cache-miss: true
      - name: Setup V
        run: ../vlang/v symlink && v version
      - name: Install dependencies
        run: |
          sudo apt install -y -qq libgtk-3-dev libwebkit2gtk-4.0-dev
          cd examples/gui_project
          v install
          ~/.vmodules/ttytm/webview/build.vsh --silent
      - name: Build
        run: |
          cd examples/gui_project
          ./build.vsh
          mv ./gui_project ./$ARTIFACT
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ env.REPO_NAME }}/examples/gui_project/${{ env.ARTIFACT }}
